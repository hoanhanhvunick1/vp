name: HAV

on: workflow_dispatch # Run manually

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 9999

    steps:
    # Step 1: Download Ngrok
    - name: Download Ngrok
      shell: powershell
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath .
        Write-Host "INFO: Ngrok downloaded and extracted."

    # Step 2: Authenticate Ngrok (Direct Token)
    - name: Connect Ngrok Account (Direct Token)
      shell: powershell
      run: |
        $ngrokToken = "2IRByDy0PAKl3baoREtehBv91Sr_3Gxksf8pzNxSTqhNy9L2"
        .\ngrok.exe authtoken $ngrokToken
        Write-Host "INFO: Ngrok Authtoken configured directly."

    # Step 3: Enable RDP
    - name: Enable Remote Desktop (RDP) Access
      shell: powershell
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Write-Host "INFO: RDP enabled and Firewall rule added."

    # Step 4: Create User
    - name: Create RDP User and Set Password
      shell: powershell
      run: |
        $userName = "havpc01"
        $password = "HavpcRDP@2025!"
        Write-Host "INFO: Creating/updating user '$userName'..."
        $secPassword = ConvertTo-SecureString $password -AsPlainText -Force
        New-LocalUser -Name $userName -Password $secPassword -FullName "$userName (GitHub Actions)" -Description "Temp RDP User" -ErrorAction SilentlyContinue
        Set-LocalUser -Name $userName -Password $secPassword -ErrorAction SilentlyContinue
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member $userName -ErrorAction SilentlyContinue
        Add-LocalGroupMember -Group "Administrators" -Member $userName -ErrorAction SilentlyContinue
        Write-Host "--------------------------------------------------"
        Write-Host "INFO: RDP user creation/update complete."
        Write-Host "   Username: $userName"
        Write-Host "   Password: $password"
        Write-Host "--------------------------------------------------"

    # Step 5: Start Ngrok Tunnel
    - name: Create Ngrok Tunnel for RDP (Port 3389)
      shell: powershell
      run: |
        Write-Host "INFO: Starting Ngrok tunnel for port 3389 in background..."
        $ngrokLogPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ngrok.log"
        # Ensure the log path variable is accessible in the new process if needed, though logging directly works
        Start-Process powershell -ArgumentList "-NoExit", "-Command", "`".\ngrok.exe tcp 3389 --log '$ngrokLogPath'`""
        Write-Host "INFO: Ngrok start command issued. Log file should be at: $ngrokLogPath"

    # Step 6: Get and Display Ngrok URL (Added Log Check)
    - name: Get and Display Ngrok Connection Address
      shell: powershell
      run: |
        $maxAttempts = 5
        $waitTime = 15
        $ngrokLogPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ngrok.log" # Define log path again

        for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            Write-Host "INFO: Attempt ${attempt}/${maxAttempts}: Waiting ${waitTime} seconds..."
            Start-Sleep -Seconds $waitTime
            Write-Host "INFO: Checking Ngrok process..."
            $ngrokProcess = Get-Process ngrok -ErrorAction SilentlyContinue
            if (-not $ngrokProcess) {
                Write-Warning "WARN: ngrok.exe process not running!"
                # --- ADDED DEBUG ---
                if (Test-Path $ngrokLogPath) {
                    Write-Warning "--- Attempting to display Ngrok log (${ngrokLogPath}) ---"
                    Get-Content $ngrokLogPath -Tail 20 # Print last 20 lines of Ngrok log
                    Write-Warning "-------------------------------------------------------"
                } else {
                    Write-Warning "WARN: Ngrok log file not found at ${ngrokLogPath}."
                }
                # --- END ADDED DEBUG ---
                continue # Continue to next attempt
            }
            Write-Host "INFO: Ngrok running (PID: $($ngrokProcess.Id)). Fetching API URL..."
            try {
                $tunnels = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -TimeoutSec 10 -ErrorAction Stop
                $tcpTunnel = $tunnels.tunnels | Where-Object {$_.proto -eq 'tcp'} | Select-Object -First 1
                if ($tcpTunnel) {
                    Write-Host "--------------------------------------------------"
                    Write-Host "SUCCESS: RDP Connection Address (Ngrok URL): $($tcpTunnel.public_url)"
                    Write-Host "   (Use this address in your Remote Desktop Client)"
                    Write-Host "--------------------------------------------------"
                    exit 0 # Success
                } else {
                    Write-Warning "WARN: TCP tunnel not found in API response on attempt ${attempt}."
                }
            } catch {
                Write-Warning "WARN: Error fetching URL on attempt ${attempt}: ${_}"
            }
        }
        Write-Error "ERROR: Could not retrieve Ngrok URL after ${maxAttempts} attempts."
        # Print final log content again if it failed completely
        if (Test-Path $ngrokLogPath) { Write-Host "--- Final Ngrok Log ---"; Get-Content $ngrokLogPath -Tail 20; Write-Host "-----------------" }
        exit 1 # Fail workflow

    # Step 7: Keep Workflow Alive
    - name: Keep Workflow Active
      shell: powershell
      run: |
        Write-Host "INFO: Windows RDP VM is ready! Ngrok should be running."
        Write-Host "   Workflow will continue running to maintain the connection."
        while ($true) { Start-Sleep -Seconds 300; Write-Host "$(Get-Date): Workflow is still running..." }
